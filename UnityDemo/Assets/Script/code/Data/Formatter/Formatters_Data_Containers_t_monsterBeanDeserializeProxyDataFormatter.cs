// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Formatters.Data.Containers
{
    public sealed class t_monsterBeanDeserializeProxyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.Containers.t_monsterBeanDeserializeProxyData>
    {
        // t_id
        private static global::System.ReadOnlySpan<byte> GetSpan_t_id() => new byte[1 + 4] { 164, 116, 95, 105, 100 };
        // t_name
        private static global::System.ReadOnlySpan<byte> GetSpan_t_name() => new byte[1 + 6] { 166, 116, 95, 110, 97, 109, 101 };
        // t_monster_id
        private static global::System.ReadOnlySpan<byte> GetSpan_t_monster_id() => new byte[1 + 12] { 172, 116, 95, 109, 111, 110, 115, 116, 101, 114, 95, 105, 100 };
        // t_monster_ui
        private static global::System.ReadOnlySpan<byte> GetSpan_t_monster_ui() => new byte[1 + 12] { 172, 116, 95, 109, 111, 110, 115, 116, 101, 114, 95, 117, 105 };
        // t_monster_type
        private static global::System.ReadOnlySpan<byte> GetSpan_t_monster_type() => new byte[1 + 14] { 174, 116, 95, 109, 111, 110, 115, 116, 101, 114, 95, 116, 121, 112, 101 };
        // t_star
        private static global::System.ReadOnlySpan<byte> GetSpan_t_star() => new byte[1 + 6] { 166, 116, 95, 115, 116, 97, 114 };
        // t_lv
        private static global::System.ReadOnlySpan<byte> GetSpan_t_lv() => new byte[1 + 4] { 164, 116, 95, 108, 118 };
        // t_head
        private static global::System.ReadOnlySpan<byte> GetSpan_t_head() => new byte[1 + 6] { 166, 116, 95, 104, 101, 97, 100 };
        // t_camp
        private static global::System.ReadOnlySpan<byte> GetSpan_t_camp() => new byte[1 + 6] { 166, 116, 95, 99, 97, 109, 112 };
        // t_type
        private static global::System.ReadOnlySpan<byte> GetSpan_t_type() => new byte[1 + 6] { 166, 116, 95, 116, 121, 112, 101 };
        // t_battle_prefab
        private static global::System.ReadOnlySpan<byte> GetSpan_t_battle_prefab() => new byte[1 + 15] { 175, 116, 95, 98, 97, 116, 116, 108, 101, 95, 112, 114, 101, 102, 97, 98 };
        // t_scale
        private static global::System.ReadOnlySpan<byte> GetSpan_t_scale() => new byte[1 + 7] { 167, 116, 95, 115, 99, 97, 108, 101 };
        // t_skill
        private static global::System.ReadOnlySpan<byte> GetSpan_t_skill() => new byte[1 + 7] { 167, 116, 95, 115, 107, 105, 108, 108 };
        // t_att
        private static global::System.ReadOnlySpan<byte> GetSpan_t_att() => new byte[1 + 5] { 165, 116, 95, 97, 116, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.Containers.t_monsterBeanDeserializeProxyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(GetSpan_t_id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_id, options);
            writer.WriteRaw(GetSpan_t_name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_name, options);
            writer.WriteRaw(GetSpan_t_monster_id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_monster_id, options);
            writer.WriteRaw(GetSpan_t_monster_ui());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_monster_ui, options);
            writer.WriteRaw(GetSpan_t_monster_type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_monster_type, options);
            writer.WriteRaw(GetSpan_t_star());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_star, options);
            writer.WriteRaw(GetSpan_t_lv());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_lv, options);
            writer.WriteRaw(GetSpan_t_head());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_head, options);
            writer.WriteRaw(GetSpan_t_camp());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_camp, options);
            writer.WriteRaw(GetSpan_t_type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_type, options);
            writer.WriteRaw(GetSpan_t_battle_prefab());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_battle_prefab, options);
            writer.WriteRaw(GetSpan_t_scale());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_scale, options);
            writer.WriteRaw(GetSpan_t_skill());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.t_skill, options);
            writer.WriteRaw(GetSpan_t_att());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_att, options);
        }

        public global::Data.Containers.t_monsterBeanDeserializeProxyData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Data.Containers.t_monsterBeanDeserializeProxyData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1684627316UL:
                                ____result.t_id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1986813812UL:
                                ____result.t_lv = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 111520460463988UL:
                                ____result.t_name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 125762891112308UL:
                                ____result.t_star = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 110369475944308UL:
                                ____result.t_head = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 123615087648628UL:
                                ____result.t_camp = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 111533748412276UL:
                                ____result.t_type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7310595013282193268UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 1684627314UL:
                                        ____result.t_monster_id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                        continue;
                                    case 1769299826UL:
                                        ____result.t_monster_ui = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                        continue;
                                }

                        }
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_t_monster_type().Slice(1))) { goto FAIL; }

                        ____result.t_monster_type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_t_battle_prefab().Slice(1))) { goto FAIL; }

                        ____result.t_battle_prefab = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28548138183909236UL:
                                ____result.t_scale = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 30518497514839924UL:
                                ____result.t_skill = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 500168744820UL) { goto FAIL; }

                        ____result.t_att = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Formatters.Data.SelfDefineType
{
    public sealed class TestClassFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.SelfDefineType.TestClass>
    {
        // x
        private static global::System.ReadOnlySpan<byte> GetSpan_x() => new byte[1 + 1] { 161, 120 };
        // y
        private static global::System.ReadOnlySpan<byte> GetSpan_y() => new byte[1 + 1] { 161, 121 };
        // z
        private static global::System.ReadOnlySpan<byte> GetSpan_z() => new byte[1 + 1] { 161, 122 };
        // str
        private static global::System.ReadOnlySpan<byte> GetSpan_str() => new byte[1 + 3] { 163, 115, 116, 114 };
        // m_lan
        private static global::System.ReadOnlySpan<byte> GetSpan_m_lan() => new byte[1 + 5] { 165, 109, 95, 108, 97, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.SelfDefineType.TestClass value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_x());
            writer.Write(value.x);
            writer.WriteRaw(GetSpan_y());
            writer.Write(value.y);
            writer.WriteRaw(GetSpan_z());
            writer.Write(value.z);
            writer.WriteRaw(GetSpan_str());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.str, options);
            writer.WriteRaw(GetSpan_m_lan());
            writer.Write(value.m_lan);
        }

        public global::Data.SelfDefineType.TestClass Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Data.SelfDefineType.TestClass();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 1:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 120UL:
                                ____result.x = reader.ReadSingle();
                                continue;
                            case 121UL:
                                ____result.y = reader.ReadSingle();
                                continue;
                            case 122UL:
                                ____result.z = reader.ReadSingle();
                                continue;
                        }
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7500915UL) { goto FAIL; }

                        ____result.str = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474080894829UL) { goto FAIL; }

                        ____result.m_lan = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
